Guia para la implementación del patrón de diseño VIPER en iOS App's.

1. Se crea la estructura (esqueleto) del proyecto de la siguiente forma.

-MyFirstViperApp
	-Entities(d)
	-PostList(d)
		-Interactor(d)
		-Protocols(d)
		-Presenter(d)
		-View(d)
		-WireFrame(d)

Nota: Por cada vista se crea un directorio raiz, en este caso PostList.

2. Despues se instalan las dependencias necesarias para el proyecto, en este caso estas:
	-Alamofire.
	-AlamofireObjectMapper.
	-AlamofireImage.
	-PKHUD.

// Modulo Entity.

3. Luego, Se crea la entidad PostModel, la cual tendrá los atributos y se mapearan con objectMapper.

4. Se crea un archivo postListProtocol.swift donde se crean los protocolos para cada modulo de la arquitectura.

// Modulo View

5. Se crea en el modulo view un archivo de tipo cocoa Touch con el nombre postListView.

6. Se agrega una table view al viewController en Main.StoryBoard y se configura para que sea de tipo postListView.

7. Se agrega el IBOutlet de la tableView en el viewController, además se crea la variable presenter, la cual es de tipo postListPresenterProtocol y la variable postList, la cual es un array de PostModel.

8. En la función viewDidLoad() de la viewController, se llama a la función viewDidLoad() del presentador y se agrega un footer(?).

9. En las otras funciones se agrega las funciones necesarias para mostrar el estado de la carga de los post con la libreria PKHUD.

10. Se implementan los metodos de los delegados de la tableView..


//	Modulo Presenter.

Se crea el archivo PostListPresenter, que extiende de PostListPresenterProtocol.

11. Se crea la variable view con el indicador weak, el cual indica que la relación entre el presentador y la view es debil ya que esta misma relación es strong en el archivo de la view.

12. Se definen las variables de el interactor y el wireframe.

13. Se implementan las funciones  para cargar los post y para mostrar detalladamente uno de esos.

14. Se crea una extensión, en la cual se implementaran las funciones del interactor de salida.


// Modulo Interactor.

Se crea el archivo PostListInteractor el cual extiende de PostListInteractorProtocol.

15. Se crea la variable presenter con el indicador weak, el cual indica que la relaciòn entre el interactor y presenter es debil ya que esta misma relación desde el presentador es strong.

16. Se crea la variable para obtener los datos desde remoteDataManager.

17. Se implementa la función que obtiene los datos desde la API.

18. Se crea una extensión de tipo PostListDataManagerOutputProtocol, el cual tiene unos metodos que se utilizan cuando se cargan los datos desde la API.


